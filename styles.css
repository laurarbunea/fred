/* SG
# Objects/tools.breakpoints

```


```
*/
/* SG
# Objects/tools.functions

```


```
*/
/* SG
# Objects/tools.mixins

```


```
*/
/* SG
# Objects/tools.typography

```


```
*/
@import url(normalize.css);
html {
  box-sizing: border-box; }

*,
*:before,
*:after {
  box-sizing: inherit; }

/* SG
# Generic

 base thing about generic...

```


```
*/
@keyframes modal-in {
  0% {
    opacity: 0; }
  100% {
    opacity: 1; } }

@keyframes modal-out {
  0% {
    opacity: 1; }
  100% {
    opacity: 0; } }

@keyframes affordance-in {
  0% {
    opacity: 0;
    transform: translateY(5%); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

@keyframes affordance-out {
  0% {
    opacity: 1;
    transform: translateY(0%); }
  100% {
    opacity: 0;
    transform: translateY(5%); } }

@keyframes affordance-in-right {
  0% {
    opacity: 0;
    transform: translateX(100%); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes affordance-out-right {
  0% {
    opacity: 1;
    transform: translateX(0%); }
  100% {
    opacity: 0;
    transform: translateX(100%); } }

body,
h1, h2, h3, h4, h5, h6,
p, blockquote, pre,
dl, dd, ol, ul,
form, fieldset, legend,
figure,
table, th, td, caption,
hr {
  margin: 0;
  padding: 0; }

h1, h2, h3, h4, h5, h6,
ul, ol, dl,
blockquote, p, address,
.block-item,
hr,
table,
fieldset, figure,
pre {
  margin-bottom: 1.5rem; }
  h1:last-child, h2:last-child, h3:last-child, h4:last-child, h5:last-child, h6:last-child,
  ul:last-child, ol:last-child, dl:last-child,
  blockquote:last-child, p:last-child, address:last-child,
  .block-item:last-child,
  hr:last-child,
  table:last-child,
  fieldset:last-child, figure:last-child,
  pre:last-child {
    margin-bottom: 0; }

ul, ol,
dd {
  margin-left: 1.5rem; }

html {
  font-family: -apple-system, BlinkMacSystemFont, 'Helvetica Neue', Helvetica, Arial, sans-serif;
  font-size: 1em;
  line-height: 1.5;
  background-color: #fff;
  color: #333;
  -webkit-tap-highlight-color: transparent;
  height: 100%;
  min-height: 100%; }

body {
  position: relative;
  height: 100%; }

/* SG
# Elements/page

```
<a href='#'>I am a link</a>

```
*/
*:active,
*:focus {
  outline: none; }

.no-js *:focus {
  outline: solid 3px #6cc6ee; }

::selection {
  background: #e5e5e5; }

::-moz-selection {
  background: #e5e5e5; }

/* SG
# Elements/focus

```
<p>Fred allows you to change the selection colour, select this paragraph to see what colour Fred has choosen</p>
```
*/
h1, h2, h3, h4, h5, h6 {
  font-weight: 700;
  line-height: 1.2; }

h1 {
  font-size: 2.125rem; }
  @media only screen and (min-width: 768px) {
    h1 {
      font-size: 4rem;
      line-height: 1.1; } }
  @media only screen and (min-width: 1000px) {
    h1 {
      font-size: 4.625rem;
      line-height: 1.05; } }

h2 {
  font-size: 1.375rem; }

h3 {
  font-size: 1.25rem; }

h4 {
  font-size: 1.125rem; }

h5 {
  font-size: 1rem; }

h6 {
  font-weight: 400;
  font-size: 1rem; }

/* SG
# Elements/headings

```
<h1>Heading 1</h1>
<h2>Heading 2</h2>
<h3>Heading 3</h3>
<h4>Heading 4</h4>
<h5>Heading 5</h5>
<h6>Heading 6</h6>

```
*/
a {
  color: inherit;
  text-decoration: none;
  transition: all 0.1s ease-in; }

/* SG
# Elements/links

```
<a href='#'>I am a link</a>

```
*/
li > ul,
li > ol {
  margin-bottom: 0; }

dt {
  font-weight: 500; }

/* SG
# Elements/lists

```
<h5>1. Ordered List</h5>
<ul>
	<li>List item one</li>
	<li>List item two</li> 
</ul>

<h5>1. Un ordered List</h5>
<ol>
	<li>List item one</li>
	<li>List item two</li> 
</ol>

<h5>3. Definition List</h5>
<dl>
  <dt>Coffee</dt>
  <dd>Black hot drink</dd>
  <dt>Milk</dt>
  <dd>White cold drink</dd>
</dl>

```
*/
table {
  width: 100%;
  border-collapse: collapse;
  border-spacing: 0; }

th {
  text-align: left; }

/* SG
# Elements/tables

```
<table >
  <tr>
    <th>Firstname</th>
    <th>Lastname</th> 
  </tr>
  <tr>
    <td>Jill</td>
    <td>Smith</td> 
  </tr>
  <tr>
    <td>Eve</td>
    <td>Jackson</td> 
  </tr>
</table>

```
*/
img {
  max-width: 100%;
  font-style: italic;
  vertical-align: middle; }

img[width],
img[height] {
  max-width: none; }

/* SG
# Elements/images

```

```
*/
.media:after,
.media--rev:after,
.media--middle-align:after {
  display: table;
  content: '';
  clear: both; }

.media__image {
  float: left;
  margin-right: 1em; }

.media__body:after {
  display: table;
  content: '';
  clear: both; }

.media--rev > .media__image {
  float: right;
  margin-right: 0;
  margin-left: 1em; }

.media--rev > .media__body:after {
  display: table;
  content: '';
  clear: both; }

.media--middle-align {
  display: table; }
  .media--middle-align > .media__body {
    display: table-cell;
    vertical-align: middle; }
    .media--middle-align > .media__body > * {
      margin: 0; }

/* SG
# Objects/media

Float an image to the left, with a clearfixed block of content to the right.

```
 

<div class='media'>
    <img src='assets/images/green-bird.jpg' class='media__image'>
    <div class='media__body'>
        <p>
             The text
        </p>
     </div>
</div>

```
*/
.grid {
  margin: 0;
  padding: 0;
  list-style: none;
  font-size: 0; }
  .grid:after {
    display: table;
    content: '';
    clear: both; }

.grid > * {
  display: inline-block;
  vertical-align: top;
  width: 100%;
  font-size: medium;
  text-justify: auto; }

/* SG
# Objects/grid.inline

```


```
*/
.grid-float {
  width: auto; }
  .grid-float:after {
    display: table;
    content: '';
    clear: both; }

.grid-float > * {
  float: left;
  width: 100%; }

/* SG
# Objects/grid.float

```


```
*/
.grid--justified,
.grid--polar {
  text-align: justify;
  text-justify: distribute-all-lines; }
  .grid--justified > *,
  .grid--polar > * {
    text-align: left; }
  .grid--justified:after,
  .grid--polar:after {
    display: inline-block;
    width: 100%;
    content: ''; }

/* SG
# Objects/grid.justified

```


```
*/
.grid-flex {
  display: flex;
  justify-content: flex-start;
  flex-wrap: wrap; }

/* SG
# Objects/grid.flex

```


```
*/
.grid--row-spacing {
  margin-bottom: 1.5rem; }
  .grid--row-spacing > * {
    margin-bottom: 1.5rem; }

.grid--col-spacing {
  margin-left: -1.5rem; }
  .grid--col-spacing > * {
    padding-left: 1.5rem; }

/* SG
# Objects/grid.spacing

```


```
*/
.grid--middle > * {
  vertical-align: middle; }

.grid--bottom > * {
  vertical-align: bottom; }

/* SG
# Objects/grid.alignment

```


```
*/
.list-inline {
  margin-left: 0;
  padding: 0;
  list-style: none; }

.list-inline__item {
  display: inline-block; }
  .list-inline__item + .list-inline__item {
    margin-left: 0.75rem; }

/* SG
# Objects/list.inline

```
 
<ul class='list-inline'>
	<li class='list-inline__item'>List item one</li>
	<li class='list-inline__item'>List item two</li> 
</ul>

```
*/
.btn {
  display: inline-block;
  vertical-align: middle;
  font: inherit;
  text-align: center;
  margin: 0;
  cursor: pointer;
  background-color: #fff;
  color: #333;
  transition: all 0.1s ease-in;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  padding-top: 0;
  padding-right: 1.5rem;
  padding-bottom: 0;
  padding-left: 1.5rem;
  line-height: 2.5;
  border-color: #333;
  border-style: solid;
  border-width: 3px;
  border-radius: 0;
  font-size: 1.5rem;
  font-weight: 700; }
  @media only screen and (max-width: 767px) {
    .btn {
      max-width: 100%; } }
  .btn, .btn:hover {
    text-decoration: none; }
  .no-touch .btn:hover {
    outline: none;
    color: #fff;
    background-color: #333; }
  .btn[disabled], .btn.is-disabled {
    pointer-events: none;
    cursor: default;
    opacity: .5 !important; }

.btn--small {
  padding-right: 1rem;
  padding-left: 1rem;
  line-height: 2; }

.btn--wide {
  padding-right: 3rem;
  padding-left: 3rem; }

.btn--block {
  width: 100%; }

@media only screen and (max-width: 767px) {
  .btn--block\@small {
    width: 100%; } }

/* SG
# Components/button

For a base button just add the class "btn" to your anchor. To modify the base button Fred has some handy classes you can add alongside your btn class: 
```
<p><a href='#' class='btn'> button </a></p>


<h5>1. btn--small</h5>
<p><a href='#' class='btn btn--small'> button </a></p>


<h5>2. btn--wide</h5>
<p><a href='#' class='btn btn--wide'> button </a></p>


<h5>3. btn--block </h5>
<p><a href='#' class='btn btn--block'> button </a></p>

```
*/
.btn-group > * {
  display: inline-block;
  margin-right: 0.5em;
  margin-bottom: 0;
  text-align: center;
  vertical-align: middle; }
  .btn-group > *:last-child {
    margin-right: 0; }

.btn-group--block > * {
  width: 100%;
  margin-right: 0; }
  .btn-group--block > *:not(:last-child) {
    margin-bottom: 1em; }

@media only screen and (max-width: 767px) {
  .btn-group--block\@small > * {
    width: 100%;
    margin-right: 0;
    margin-bottom: 1.5rem; }
    .btn-group--block\@small > *:last-child {
      margin-bottom: 0; } }

.btn-group--justified {
  display: table;
  min-width: 100%;
  margin-right: -0.5em;
  margin-left: -0.5em;
  border-collapse: separate;
  border-spacing: 0.5em 0;
  table-layout: fixed;
  white-space: nowrap; }
  .btn-group--justified > * {
    display: table-cell;
    float: none;
    width: 1%; }

@media only screen and (max-width: 767px) {
  .btn-group--justified\@small {
    display: table;
    min-width: 100%;
    margin-right: -0.5em;
    margin-left: -0.5em;
    border-collapse: separate;
    border-spacing: 0.5em 0;
    table-layout: fixed; }
    .btn-group--justified\@small > * {
      display: table-cell;
      float: none;
      width: 1%; } }

@media only screen and (max-width: 767px) {
  .btn-group--reverse\@small {
    display: flex;
    flex-direction: column-reverse; }
    .btn-group--reverse\@small > * {
      margin-top: 1em;
      margin-bottom: 0; }
    .btn-group--reverse\@small > *:last-child {
      margin-top: 0; } }

/* SG
# Components/button-groups

Fred has organised some button group modifiers to make your life easier.

```
<h5>1. btn-group</h5>
<p>Surround the button with this class and it will add a right hand margin to each button except for the last button.</p>

<div class='btn-group'>
    <a href='#' class='btn'>btn 1</a>
    <a href='#' class='btn'>btn 2</a>
</div>
<br />

<h5>2. btn-group--block</h5>
<p>Surround the button with this class and it will modify the buttons to a full sized block.</p>

<div class='btn-group--block'>
    <a href='#' class='btn '>btn 1</a>
    <a href='#' class='btn '>btn 2</a>
</div>
<br />

<h5>3. btn-group--justified</h5>
<p>Surround the button with this class and it will justify the buttons.</p>
<div class='btn-group--justified'>
    <a href='#' class='btn '>btn 1</a>
    <a href='#' class='btn '>btn 2</a>
</div>
<br />

<h5>4. btn-group--reverse: </h5>
<p>Surround the button with this class and it will reverse the order of the buttons when on the small breakpoint.</p>

<div class='btn-group--reverse'>
    <a href='#' class='btn '>btn 1</a>
    <a href='#' class='btn '>btn 2</a>
</div>

```
*/
.icon-text > svg {
  width: 1.25em;
  height: 1.25em;
  vertical-align: middle;
  margin-top: -.125em;
  margin-right: .25em; }
  .icon-text > svg:last-child {
    margin-right: 0;
    margin-left: .25em; }

.icon-text--small > svg {
  width: 1em;
  height: 1em;
  margin-top: -.125em; }

/* SG
# Components/icon-text
Useful for dropping a small icon next to a piece of text, with some spacing.

```
 <span class="icon-text">
     <span>The text</span>
     <svg>
         <use xlink:href="#arrow-next">
     </svg>
</span>

<h5>1. icon-text--small</h5>
<span class="icon-text--small">
     <span>The text</span>
     <svg>
         <use xlink:href="#arrow-next">
     </svg>
</span>
```
*/
.i {
  display: inline-block;
  width: 16px;
  height: 16px; }

svg > use {
  fill: currentColor; }

.i--black {
  color: #000; }

.i--white {
  color: #fff; }

/* SG
# Components/icons

todo explain i--white, i--black i

```
 
```
*/
.lazyload,
.lazyloading {
  opacity: 0; }

.lazyloaded,
.no-js .lazyload {
  opacity: 1;
  transition: opacity .45s; }

/* SG
# Components/images.lazyload

```


```
*/
.link {
  transition: all 0.1s ease-in; }
  .no-touch .link:hover {
    color: #333; }

.link-social {
  display: inline-block;
  line-height: 1; }
  .link-social > .link-social__icon {
    width: 20px;
    height: 20px; }

.link-social--invert {
  color: #fff;
  padding: .25em .25em .125em; }

.faux-link--underline {
  transition: all 0.1s ease-in;
  box-shadow: inset 0 -0.062em 0 #fff; }

.link--tag {
  font-weight: 700;
  font-size: 1.125rem;
  line-height: 1.2; }
  @media only screen and (min-width: 768px) {
    .link--tag {
      font-size: 1.3125rem;
      line-height: 1.1; } }
  @media only screen and (min-width: 1000px) {
    .link--tag {
      font-size: 1.4375rem;
      line-height: 1.05; } }

.link--underline {
  box-shadow: inset 0 -0.062em 0 #fff; }
  .no-touch .link--underline:hover {
    box-shadow: inset 0 -0.062em 0 #333; }

/* SG
# Components/links

```
<p><a href='#' class='link'><i class='link-social__icon'>icon</i>link social</a></p>
<p><a href='#' class='link'><i class='link-social__icon'>icon</i>link social with invert</a></p>

<p><a href='#' class='link'>link</a></p>
<h5>1. link--underline</h5>
<p><a href='#' class='link link--underline'>link underline</a></p>
<h5>2. link--tag</h5>
<p><a href='#' class='link link--tag'>link tag</a></p>
<h5>3. faux-link--underline</h5>
<p><a href='#' class='faux-link--underline'>faux link with underline</a></p>

```
*/
.logo {
  display: inline-block; }
  .logo > .i {
    height: 36px; }

/* SG
# Components/logo


```


```
*/
.u-body-modal-active {
  overflow: hidden; }

.modal {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 3000;
  animation: modal-in .15s ease-out 0s backwards; }

.modal--exit {
  animation: modal-out .3s ease-out .2s forwards; }
  .modal--exit .modal__content {
    animation: affordance-out .3s ease-in 0s forwards; }
  .modal--exit .modal__control {
    animation: affordance-out-top .3s ease-in 0s forwards; }

.modal__overlay {
  position: fixed;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  z-index: 1001;
  background-color: rgba(255, 255, 255, 0.95); }

.modal__table {
  display: table;
  position: relative;
  width: 100%;
  height: 100%;
  vertical-align: middle; }

.modal__center {
  display: table-cell;
  vertical-align: middle;
  text-align: center;
  animation: modal-in .15s ease-out .25s backwards; }

.modal__content {
  display: inline-block;
  position: relative;
  z-index: 1002;
  min-width: 10.5em;
  max-width: 32em;
  min-height: 6em;
  padding: 1em 2em;
  background: #fff;
  animation: affordance-in 0.5s cubic-bezier(0.075, 0.82, 0.165, 0) 0.3s backwards; }

.modal__control {
  position: absolute;
  top: 0;
  right: 0;
  z-index: 1002;
  text-align: right;
  animation: affordance-in-top 0.5s cubic-bezier(0.075, 0.82, 0.165, 0) 0.25s backwards; }

.modal__control-item {
  display: inline-block;
  color: #333;
  padding: .5em;
  line-height: 1;
  cursor: pointer;
  background: #333;
  margin-top: 0.75rem;
  margin-right: 1.5rem; }
  .modal__control-item > .i {
    width: 20px;
    height: 20px; }
    @media only screen and (min-width: 768px) {
      .modal__control-item > .i {
        width: 36px;
        height: 36px; } }

.modal--video .modal__overlay {
  background: rgba(0, 0, 0, 0.9); }

.modal--video .modal__content {
  width: 100%;
  padding: 0; }
  @media only screen and (min-width: 1000px) {
    .modal--video .modal__content {
      min-width: 53rem; } }

.modal__video-inner {
  position: relative;
  width: 100%;
  height: 0;
  padding-bottom: 60%;
  background: #000;
  box-shadow: 0 0.1em 0.2em rgba(0, 0, 0, 0.05); }

.modal__video-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%; }
  .modal__video-wrapper > .spinner {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 40px;
    height: 40px;
    margin-top: -1.25rem;
    margin-left: -1.25rem; }

/* SG
# Components/modals

Requires '_generic.keyframes.scss';
As of 2015, the vertical-align: middle table is still the best cross-browser
way to vertically centre stuff. This modal component uses this pattern with
the following structure:

<xmp><div class="modal modal--active">
    <div class="modal__table">
        <div class="modal__center">
            <div class="modal__content">
               Hello!
          </div>
        </div>
   </div>
</div>

<div class="modal modal--active modal--video ">
    <div class="modal__table">
        <div class="modal__center">
            <div class="modal__content">
               Modal video
           </div>
        </div>
    </div>
</div>
</xmp>

*/
.nav-primary__link {
  display: inline-block;
  padding-right: 1.5rem;
  padding-left: 1.5rem;
  font-weight: 400; }
  .nav-primary__link.is-active {
    text-decoration: underline;
    cursor: default; }

/* SG
# Components/nav.primary


```


```
*/
.site-wrapper {
  max-width: 1280px; }

.wrapper {
  max-width: 1280px;
  margin-right: auto;
  margin-left: auto; }
  .wrapper:after {
    display: table;
    content: '';
    clear: both; }

.wrapper--wide {
  max-width: 1400px; }

.wrapper--narrow {
  max-width: 960px; }

/* SG
# Components/page.wrapper

Wrappers control the width

```

<h5>1. wrapper--wide</h5>
<h5>2. wrapper--narrow</h5>


```
*/
.gutters {
  padding-right: 1.5rem;
  padding-left: 1.5rem; }

@media only screen and (max-width: 767px) {
  .gutters\@small {
    padding-right: 1.5rem;
    padding-left: 1.5rem; } }

@media only screen and (max-width: 767px) {
  .gutters--off\@small {
    padding-right: 0;
    padding-left: 0; } }

/* SG
# Components/page.gutters

Gutters control the horizontal spacing

```

<h5>1. gutters--off</h5>


```
*/
.section {
  padding-top: 3rem;
  padding-bottom: 3rem; }

.section--stacked + .section--stacked {
  padding-top: 0; }

.section--no-top {
  padding-top: 0; }

.section--no-bottom {
  padding-bottom: 0; }

/* SG
# Components/page.sections

Sections control the vertical spacing

```

<h5>1. section--stacked</h5>
<h5>2. section--no-top</h5>
<h5>3. section--no-bottom</h5>


```
*/
.page-footer {
  font-size: 0.75rem;
  padding: 3rem 1.5rem; }

/* SG
# Components/page.footer


```


```
*/
.page-header {
  background-color: #fff;
  color: #333;
  padding: 1.5rem; }
  .page-header:after {
    display: table;
    content: '';
    clear: both; }

.page-header--fixed {
  position: fixed;
  z-index: 10;
  height: 5.25rem;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0; }
  .page-header--fixed + * {
    margin-top: 5.25rem; }

/* SG
# Components/page.header


<xmp>
    <div class="page-header page-header--fixed">
        <p>fixed header</p>
    </div>

</xmp>
```
<div class="page-header ">
    <p>header</p>
</div>

```
*/
.radio-picker > label,
.radio-picker__item {
  display: block;
  position: relative;
  margin-bottom: 1.5em;
  margin-left: 0;
  box-sizing: border-box; }

.radio-picker__input {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
  width: 100%;
  height: 100%;
  cursor: pointer;
  opacity: 0;
  filter: alpha(opacity=0);
  appearance: none; }
  .radio-picker__input:focus {
    outline: none; }
  .radio-picker__input:hover + .radio-picker__body {
    background-color: #fafafa; }

.radio-picker__input:checked + .radio-picker__body,
.radio-picker__input--checked + .radio-picker__body {
  background-color: #fff;
  border-color: #d2d2d2;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1); }

.radio-picker__body {
  padding: 1em;
  background-color: #eaeaea;
  border: solid 1px #dfdfdf;
  border-radius: .25em; }

/* SG
# Components/form.radio-picker
Turns a group of radio elements into big tappable regions, while still being
accessible through keyboard navigation:

```
<div class="radio-picker">
     <label>
        <input class="radio-picker__input" type="radio" name="" checked>
        <span class="radio-picker__body">
             Rich context goes here!
        </span>
    </label>
    <label>
        <input class="radio-picker__input" type="radio" name="">
        <span class="radio-picker__body">
             Rich context goes here!
        </span>
    </label>
</div>
```
*/
.rich-text p {
  font-size: 1rem; }
  @media only screen and (min-width: 768px) {
    .rich-text p {
      font-size: 1.125rem; } }
  @media only screen and (min-width: 1000px) {
    .rich-text p {
      font-size: 1.25rem; } }

.rich-text a {
  text-decoration: underline; }

.rich-text ul,
.rich-text ol {
  margin-left: 3rem; }

.rich-text br + br {
  display: none; }

/* SG
# Components/rich-text



```


```
*/
.table {
  border: 1px solid #5CE59D;
  background-color: #fff; }

.table__head {
  border-bottom: solid 1px #5CE59D; }

.table__foot {
  border-top: solid 1px #5CE59D; }

.table__cell,
.table__header-cell {
  padding: .75em;
  border-right: solid 1px #5CE59D;
  vertical-align: top; }

.table__row--border\+\+ {
  border-bottom: 5px solid #5CE59D; }

/* SG
# Components/page.table.base

Base styles to be shared across all table options.
We have 5 table options/modifiers. Usually there will be at least two options applied to a table since the table class alone is just basic styles.

```


```
*/
@media only screen and (max-width: 767px) {
  .table--responsive {
    display: block;
    border: none;
    border-bottom: 0; } }

@media only screen and (max-width: 767px) {
  .table--responsive .table__head {
    display: none; } }

@media only screen and (max-width: 767px) {
  .table--responsive .table__body,
  .table--responsive .table__row {
    display: block; } }

@media only screen and (max-width: 767px) {
  .table--responsive .table__cell {
    display: block;
    width: 100%;
    text-align: left;
    border-right: none;
    margin-top: 0; } }

@media only screen and (max-width: 767px) {
  .table--responsive .table__cell {
    overflow: hidden;
    position: relative;
    padding-left: 50%;
    background: #F7F7F7;
    border-top: solid 1px #e6e6e6; } }

@media only screen and (max-width: 767px) {
  .table--responsive .table__cell:before {
    content: attr(data-header);
    float: left;
    width: 95%;
    margin-left: -100%;
    color: #777; } }

@media only screen and (max-width: 767px) {
  .table--responsive .table__cell--title\@small {
    padding: 0;
    margin-top: 20px;
    margin-bottom: 6.66667px;
    background: transparent;
    font-weight: bold;
    border-top: 0; } }

/* SG
# Components/page.table.responsive

Responsive tables with more than two columns break to a different
and easier to read format on small screens.

```
<h5>page.table.responsive</h5>
<table cellspacing="0" class='table table--responsive table--striped@medium'>
    <thead class="table__head">
        <tr class="table__row">
            <th class="table__header-cell">Transaction fee</th>
            <th class="table__header-cell">Fast Forward Saver</th>
            <th class="table__header-cell">Back-up Saver</th>
            <th class="table__header-cell">First Saver</th>
        </tr>
    </thead>
    <tbody class="table__body">
        <tr class="table__row">
            <td class='table__cell table__cell--title@small'>Account Management Fee</td>
            <td class='table__cell' data-header="Fast Forward Saver">Free</td>
            <td class='table__cell' data-header="Back-up Saver">Free</td>
            <td class='table__cell' data-header="First Saver">Free</td>
        </tr>
        <tr class="table__row">
            <td class='table__cell table__cell--title@small'>Deposits</td>
            <td class='table__cell' data-header="Fast Forward Saver">Free</td>
            <td class='table__cell' data-header="Back-up Saver">Free</td>
            <td class='table__cell' data-header="First Saver">Free</td>
        </tr>
    </tbody>
</table>

```
*/
.table--scrollable {
  min-width: 768px; }

/* SG
# Components/page.table.scrollable

Scrollable tables, for tables with complex content that doesn't break down on small screens very easily. Relies on parent container to control the overflow.

```
<h5>page.table.scrollable</h5>
<div class="u-scrollable-x u-space">
    <table cellspacing="0" class='table table--scrollable table--striped'>
        <thead class="table__head">
            <tr class="table__row">
                <th class="table__header-cell"></th>
                <th class="table__header-cell">Fast Forward Saver</th>
                <th class="table__header-cell">Back-up Saver</th>
                <th class="table__header-cell">First Saver</th>
                <th class="table__header-cell">Online Call<sup>+</sup></th>
            </tr>
        </thead>
        <tbody class="table__body">
            <tr class="table__row">
                <td class='table__cell table__cell--title@small'>Account Management Fee</td>
                <td class='table__cell' data-header="Fast Forward Saver">Free</td>
                <td class='table__cell' data-header="Back-up Saver">Free</td>
                <td class='table__cell' data-header="First Saver">Free</td>
                <td class='table__cell' data-header="Online Call">Free</td>
            </tr>
            <tr class="table__row">
                <td class='table__cell table__cell--title@small'>Deposits</td>
                <td class='table__cell' data-header="Fast Forward Saver">Free</td>
                <td class='table__cell' data-header="Back-up Saver">Free</td>
                <td class='table__cell' data-header="First Saver">Free</td>
                <td class='table__cell' data-header="Online Call">Free</td>
            </tr>
            <tr class="table__row">
                <td class='table__cell table__cell--title@small'>Transfers (for electronic transfers between your Kiwibank accounts)</td>
                <td class='table__cell' data-header="Fast Forward Saver">Free</td>
                <td class='table__cell' data-header="Back-up Saver">Free</td>
                <td class='table__cell' data-header="First Saver">Free</td>
                <td class='table__cell' data-header="Online Call">Free</td>
            </tr>
        </tbody>
    </table>
</div>

```
*/
@media only screen and (max-width: 767px) {
  .table--stacked {
    border-bottom: 0; } }

@media only screen and (max-width: 767px) {
  .table--stacked .table__head {
    display: none; } }

@media only screen and (max-width: 767px) {
  .table--stacked .table__row {
    display: block;
    border-bottom: 1px solid #5CE59D;
    padding-bottom: .75rem; } }

@media only screen and (max-width: 767px) {
  .table--stacked .table__cell {
    display: block;
    width: 100%;
    padding-bottom: 0;
    border-right: 0; } }

@media only screen and (max-width: 767px) {
  .table--stacked .table__cell:first-child {
    font-weight: bold; } }

@media only screen and (max-width: 767px) {
  .table--stacked .table__cell:before {
    display: block;
    width: 100%;
    content: attr(data-header);
    font-weight: 400;
    opacity: .75;
    font-size: .875em; } }

/* SG
# Components/page.table.stacked

Stacked tables, for when there isn't too many columns and they want it to behave a little more like a definition list. Uses dataattributes to add table heading content to table cell pseudo elements so we don't lose table headings entirely.

```
<table cellspacing="0" class="table table--stacked">
    <thead class="table__head">
        <tr class="table__row">
            <th class="table__header-cell">
                Header title
            </th>
            <th class="table__header-cell">
                As at 31 December 2015
            </th>
            <th class="table__header-cell">
                As at Now
            </th>
        </tr>
    </thead>
    <tbody class="table__body">
        <tr class="table__row">
            <td class="table__cell table__cell--title@small" data-header="Header title">
                Actual Solvency Capital (A)
            </td>
            <td class="table__cell" data-header="As at 31 December 2015">
                14,069,000
            </td>
            <td class="table__cell" data-header="As at Now">
                14,069,000
            </td>
        </tr>
        <tr class="table__row">
            <td class="table__cell table__cell--title@small" data-header="Header title">
                Minimum Solvency Capital (B)
            </td>
            <td class="table__cell" data-header="As at 31 December 2015">
                5,451,000
            </td>
            <td class="table__cell" data-header="As at Now">
                5,451,000
            </td>
        </tr>
    </tbody>
</table>

        
```
*/
.table--striped .table__body .table__row:nth-child(odd) {
  background-color: #F4FFFF; }

@media only screen and (min-width: 768px) {
  .table--striped\@medium .table__body .table__row:nth-child(odd) {
    background-color: #F4FFFF; } }

/* SG
# Components/page.table.striped

//todo clean up comment
This component adds stripes to each odd row in the table body section. 
Sometimes we only want stripes from medium and up, ie responsive tables don't want stripes at small sizes otherwise we have to create a rather specific override to remove.
Striped tables, we don't want this as a base style on all tables otherwise we have to remove them from various breakpoints in various situations. Better to lock it down to a class of its own since the declaration to style the stripes is quite specific.

```
<table class="table table--striped ">
    <tbody class="table__body">
        <tr class="table__row">
            <td class="table__cell">
                <p>Claire</p>
            </td>
            <td class="table__cell">
                <p>Campbell</p>
            </td>
        </tr>
        <tr class="table__row">
            <td class="table__cell">
                <p>Laura</p>
            </td>
            <td class="table__cell">
                <p>Bunea</p>
            </td>
        </tr>
        <tr class="table__row">
            <td class="table__cell">
               <p>Sam</p>
            </td>
            <td class="table__cell">
                <p>Sanders</p>
            </td>
        </tr>
        <tr class="table__row">
            <td class="table__cell">
                <p>Katie</p>
            </td>
            <td class="table__cell">
               <p>Day</p>
            </td>
        </tr>
    </tbody>
</table>
<h5>1. table--striped@medium </h5>
<table class="table table--striped ">
    <tbody class="table__body">
        <tr class="table__row">
            <td class="table__cell">
                <p>Claire</p>
            </td>
            <td class="table__cell">
                <p>Campbell</p>
            </td>
        </tr>
        <tr class="table__row">
            <td class="table__cell">
                <p>Laura</p>
            </td>
            <td class="table__cell">
                <p>Bunea</p>
            </td>
        </tr>
        <tr class="table__row">
            <td class="table__cell">
               <p>Sam</p>
            </td>
            <td class="table__cell">
                <p>Sanders</p>
            </td>
        </tr>
        <tr class="table__row">
            <td class="table__cell">
                <p>Katie</p>
            </td>
            <td class="table__cell">
               <p>Day</p>
            </td>
        </tr>
    </tbody>
</table>

```
*/
.u-disabled {
  pointer-events: none !important;
  cursor: default !important; }

.u-accessible {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  border: 0;
  clip-path: inset(1px); }

.u-transition {
  transition: all 0.1s ease-in !important; }

/* SG
# Objects/utilities

```


```
*/
.u-align-middle {
  vertical-align: middle !important; }

.u-align-bottom {
  vertical-align: bottom !important; }

.u-text-left {
  text-align: left !important; }

.u-text-right {
  text-align: right !important; }

.u-text-center {
  text-align: center !important; }

.u-margin-center,
.u-auto {
  margin-left: auto !important;
  margin-right: auto !important; }

.u-left {
  float: left !important; }

.u-right {
  float: right !important; }

.u-clear {
  clear: both !important; }

/* SG
# Utilities/align
TODO FIX EXAMPLES
Here are some utility classes to help modify the vertical alignment, text alignment, margins and floats. To see the code used scroll to the code example below.

```
<h5>VERTICAL ALIGN:</h5>
<div class="u-align-middle">
    <img src="http://placekitten.com/200/150">
    <img src="http://placekitten.com/220/80">
</div>
<div class="u-align-bottom">
  <img src="http://placekitten.com/200/150">
  <img src="http://placekitten.com/220/80">
</div>
<br />

<h5>TEXT ALIGN:</h5>

<p class='u-text-left'>Left Text</p>
<p class='u-text-right'>Right Text</p>
<p class='u-text-center'>Centered Text</p>
<br />

<h5>MARGIN CENTER: </h5>
<div class='u-auto'>
  <img src="http://placekitten.com/200/150">
  <img src="http://placekitten.com/220/80">
</div>
<div class='u-margin-center'>
  <img src="http://placekitten.com/200/150">
  <img src="http://placekitten.com/220/80">
</div>
<br />

<h5>FLOATS: </h5>
<div class='u-clear'>
    <img class='u-left' src="http://placekitten.com/200/150">
    <img class='u-right' src="http://placekitten.com/220/80">
</div>

```
*/
.u-mb-0 {
  margin-bottom: 0 !important; }

.u-mb {
  margin-bottom: 1.5rem !important; }

.u-mb\+\+ {
  margin-bottom: 3rem !important; }

.u-mb-- {
  margin-bottom: 1rem !important; }

/* SG
# Utilities/margins
TODO FIX EXAMPLE AND ARE WE JSUT USING MB FOR THIS  NOT MT ETC
Here are some handy spacing classes:

```
<div style='background-color:#0F9850'>
	<p style='background-color:#efefef' class='u-mb--'>mb--</p>
	<p style='background-color:#efefef' class='u-mb-'>mb-</p>
	<p style='background-color:#efefef' class='u-mb'>mb</p>
	<p style='background-color:#efefef' class='u-mb+'>mb+</p>
	<p style='background-color:#efefef' class='u-mb++'>mb++</p>
</div>
```
*/
.u-text-bold {
  font-weight: 700; }

.u-text-uppercase {
  text-transform: uppercase !important; }

.u-text-underline {
  text-decoration: underline !important; }

.u-muted {
  opacity: .75 !important; }

.u-font-size\-\- {
  font-size: .9em; }

.u-font-size\+\+ {
  font-size: 1.2em; }

.u-big {
  font-weight: 500;
  font-size: 1.125rem; }
  @media only screen and (min-width: 768px) {
    .u-big {
      font-size: 1.3125rem;
      line-height: 1.1; } }
  @media only screen and (min-width: 1000px) {
    .u-big {
      font-size: 1.4375rem;
      line-height: 1.05; } }

.u-text-truncate {
  max-width: 100%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis; }

@media only screen and (max-width: 480px) {
  .u-hyphen {
    overflow-wrap: break-word;
    word-wrap: break-word;
    word-break: break-all;
    word-break: break-word;
    hyphens: auto; } }

/* SG
# Utilities/text

```
<p class='u-text-bold'>Bold text</p>
<p class='u-text-uppercase'>Uppercase text</p>
<p class='u-text-underline'>Underlined text</p>
<p>base paragraph size</p>
<p class='u-font-size+'>large paragraph size</p>
<p class='u-font-size-'>small paragraph size</p>
<p class='u-big'>Big paragraph size</p>
<p class='u-text-truncate'>Here is a large line of text to show that this text is truncated truncated truncated truncated truncated truncated truncated.</p>
<p class='u-hyphen'>hyphen kjahs kasjdh kajs kajsdka dkajs dkas dhaksdj askjdha ks</p>
```
*/
.u-hidden {
  display: none; }

@media only screen and (max-width: 767px) {
  .u-hidden\@small {
    display: none; } }

@media only screen and (min-width: 768px) {
  .u-hidden\@medium {
    display: none; } }

.touch .u-hidden-touch {
  display: none;
  visibility: hidden; }

.no-touch .u-hidden-no-touch {
  display: none;
  visibility: hidden; }

/* SG
# Objects/tools.visibility

```


```
*/
.width-full {
  width: 100% !important; }

.width-1\/2 {
  width: 50% !important; }

.width-1\/3 {
  width: 33.33333% !important; }

.width-2\/3 {
  width: 66.66667% !important; }

.width-1\/4 {
  width: 25% !important; }

.width-2\/4 {
  width: 50% !important; }

.width-3\/4 {
  width: 75% !important; }

.width-1\/10 {
  width: 10% !important; }

.width-2\/10 {
  width: 20% !important; }

.width-3\/10 {
  width: 30% !important; }

.width-4\/10 {
  width: 40% !important; }

.width-5\/10 {
  width: 50% !important; }

.width-6\/10 {
  width: 60% !important; }

.width-7\/10 {
  width: 70% !important; }

.width-8\/10 {
  width: 80% !important; }

.width-9\/10 {
  width: 90% !important; }

@media only screen and (max-width: 767px) {
  .width-full\@small {
    width: 100% !important; }
  .width-1\/2\@small {
    width: 50% !important; }
  .width-1\/3\@small {
    width: 33.33333% !important; }
  .width-2\/3\@small {
    width: 66.66667% !important; }
  .width-1\/4\@small {
    width: 25% !important; }
  .width-2\/4\@small {
    width: 50% !important; }
  .width-3\/4\@small {
    width: 75% !important; }
  .width-1\/10\@small {
    width: 10% !important; }
  .width-2\/10\@small {
    width: 20% !important; }
  .width-3\/10\@small {
    width: 30% !important; }
  .width-4\/10\@small {
    width: 40% !important; }
  .width-5\/10\@small {
    width: 50% !important; }
  .width-6\/10\@small {
    width: 60% !important; }
  .width-7\/10\@small {
    width: 70% !important; }
  .width-8\/10\@small {
    width: 80% !important; }
  .width-9\/10\@small {
    width: 90% !important; } }

@media only screen and (min-width: 768px) {
  .width-full\@medium {
    width: 100% !important; }
  .width-1\/2\@medium {
    width: 50% !important; }
  .width-1\/3\@medium {
    width: 33.33333% !important; }
  .width-2\/3\@medium {
    width: 66.66667% !important; }
  .width-1\/4\@medium {
    width: 25% !important; }
  .width-2\/4\@medium {
    width: 50% !important; }
  .width-3\/4\@medium {
    width: 75% !important; }
  .width-1\/10\@medium {
    width: 10% !important; }
  .width-2\/10\@medium {
    width: 20% !important; }
  .width-3\/10\@medium {
    width: 30% !important; }
  .width-4\/10\@medium {
    width: 40% !important; }
  .width-5\/10\@medium {
    width: 50% !important; }
  .width-6\/10\@medium {
    width: 60% !important; }
  .width-7\/10\@medium {
    width: 70% !important; }
  .width-8\/10\@medium {
    width: 80% !important; }
  .width-9\/10\@medium {
    width: 90% !important; } }

@media only screen and (min-width: 1000px) {
  .width-full\@large {
    width: 100% !important; }
  .width-1\/2\@large {
    width: 50% !important; }
  .width-1\/3\@large {
    width: 33.33333% !important; }
  .width-2\/3\@large {
    width: 66.66667% !important; }
  .width-1\/4\@large {
    width: 25% !important; }
  .width-2\/4\@large {
    width: 50% !important; }
  .width-3\/4\@large {
    width: 75% !important; }
  .width-1\/10\@large {
    width: 10% !important; }
  .width-2\/10\@large {
    width: 20% !important; }
  .width-3\/10\@large {
    width: 30% !important; }
  .width-4\/10\@large {
    width: 40% !important; }
  .width-5\/10\@large {
    width: 50% !important; }
  .width-6\/10\@large {
    width: 60% !important; }
  .width-7\/10\@large {
    width: 70% !important; }
  .width-8\/10\@large {
    width: 80% !important; }
  .width-9\/10\@large {
    width: 90% !important; } }

/* SG
# Utilities/widths

Fred has created a series of width helper classes that you can use to size things like grid systems.
//todo add media quiery info
```
<div class='grid'>
    <div class='width-1/4' >
        <p style='border:1px solid #222'>width-1/4</p>
    </div>
    <div class='width-1/4'>   
        <p style='border:1px solid #222'>width-1/4</p>
    </div>
    <div class='width-1/2'>   
        <p style='border:1px solid #222'>width-1/2</p>
    </div>
</div>
<div class='grid'>
    <div class='width-1/3' >
        <p style='border:1px solid #222'>width-1/3</p>
    </div>
    <div class='width-2/3'>   
        <p style='border:1px solid #222'>width-2/3</p>
    </div>
</div>
<div class='grid'>
    <div class='width-1/10' >
        <p style='border:1px solid #222'>width-1/10</p>
    </div>
    <div class='width-2/10' >
        <p style='border:1px solid #222'>width-2/10</p>
    </div>
    <div class='width-3/10' >
        <p style='border:1px solid #222'>width-3/10</p>
    </div>
    <div class='width-4/10' >
        <p style='border:1px solid #222'>width-4/10</p>
    </div>
</div>
```
*/
.t-pink .u-current-color {
  color: #f5b1d8; }

.no-touch .t-pink .u-current-color\:hover:hover {
  color: #f5b1d8; }

.t-pink.t-pink--bg,
.t-pink .u-current-bg-color {
  background-color: #f5b1d8; }

.t-pink .u-current-text-color {
  color: #333; }

.u-color-pink {
  color: #f5b1d8; }

.no-touch .u-color-pink\:hover:hover {
  color: #f5b1d8; }

.u-bg-color-pink {
  background-color: #f5b1d8; }

.u-text-color-pink {
  color: #333; }

.t-green .u-current-color {
  color: #a5cc8e; }

.no-touch .t-green .u-current-color\:hover:hover {
  color: #a5cc8e; }

.t-green.t-green--bg,
.t-green .u-current-bg-color {
  background-color: #a5cc8e; }

.t-green .u-current-text-color {
  color: #333; }

.u-color-green {
  color: #a5cc8e; }

.no-touch .u-color-green\:hover:hover {
  color: #a5cc8e; }

.u-bg-color-green {
  background-color: #a5cc8e; }

.u-text-color-green {
  color: #333; }

.t-blue .u-current-color {
  color: #509ac7; }

.no-touch .t-blue .u-current-color\:hover:hover {
  color: #509ac7; }

.t-blue.t-blue--bg,
.t-blue .u-current-bg-color {
  background-color: #509ac7; }

.t-blue .u-current-text-color {
  color: #333; }

.u-color-blue {
  color: #509ac7; }

.no-touch .u-color-blue\:hover:hover {
  color: #509ac7; }

.u-bg-color-blue {
  background-color: #509ac7; }

.u-text-color-blue {
  color: #333; }

/* SG
# Theming/theming

Fred gives you three default themes to get you up and running.
//todo
```
<div class="[ grid grid--row-spacing grid--col-spacing ]">
    <div class="[ width-1/4@large width-1/2@medium ]">
        <div class="">
            <div class="t-pink--bg">       
                Aa <a href>a</a>
            </div>
            <div>
                <p class='t-pink'>t-pink</p>
            </div>
        </div>
    </div>     
    <div class="[ width-1/4@large width-1/2@medium ]">
        <div class="">
            <div class="t-green ">
                Aa <a href>a</a>
            </div>
            <div class="">
                <p>t-green</p>
            </div>
        </div>
    </div>
    <div class="[ width-1/4@large width-1/2@medium ]">
        <div class="">
            <div class="t-blue">
                Aa <a href>a</a>
            </div>
            <div>
                <p>t-blue</p>
            </div>
        </div>
    </div>
</div>


```
*/

/*# sourceMappingURL=data:application/json;base64, */
